<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.taoxiuxia.mapper.IncomeMapper" >
  
  <resultMap id="BaseResultMap" type="com.taoxiuxia.model.Income" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="item_id" property="itemId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="money" property="money" jdbcType="REAL" />
    <result column="date" property="date" jdbcType="TIMESTAMP" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="dele" property="dele" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, item_id, user_id, money, date, remark, dele
  </sql>
  
  
  <select id="selectAllIncomes" resultMap="BaseResultMap">
	SELECT
		income.id,
		income.item_id,
		income.user_id,
		income.date,
		income.money,
		income.type_of_money,
		income.remark,
		item.name as itemName
	FROM
		income,
		item
	WHERE
		income.item_id = item.id
	AND income.user_id = 2  <!-- 目前只有一个用户，如果需要指定用户的时候再进行修改 -->
	AND income.dele = 0
	AND date_format(income.date, '%Y-%m') = date_format(now(), '%Y-%m') <!-- 只查询本月数据 -->
	ORDER BY
		income.id DESC
  </select>
  
  <!-- 查询收入和支出，根据传进来的日期和关键字，用于history页面 -->
  <select id="selectIncomesAndExpenditure" resultType="java.util.HashMap" parameterType="java.util.HashMap" >
	SELECT
		income.id,
		income.item_id,
		income.user_id,
		income.date as date,
		income.money,
		income.type_of_money,
		income.remark,
		item.id AS itemId,
		item.name AS itemName,
		item.in_or_ex AS itemType
	FROM
		income,
		item
	<where>
		income.item_id = item.id
	AND income.user_id = #{userId,jdbcType=INTEGER}
	AND income.dele = 0
		<if test="beginDate!=null">
			AND date_format(income.date, '%Y-%m') &gt;= date_format(#{beginDate}, '%Y-%m')
		</if>
		<if test="endDate!=null">
			AND date_format(income.date, '%Y-%m') &lt;= date_format(#{endDate}, '%Y-%m')
		</if>
		<if test="keyword!=null">
			AND (item.name like concat('%', #{keyword}, '%')
			OR income.remark like concat('%', #{keyword}, '%'))
		</if>
		<if test="inOrEx!=null">
			AND item.in_or_ex = #{inOrEx}
		</if>
	</where>
	
	UNION
	
	SELECT
		expenditure.id,
		expenditure.item_id,
		expenditure.user_id,
		expenditure.date as date,
		expenditure.money,
		income.type_of_money,
		expenditure.remark,
		item.id AS itemId,
		item.name AS itemName,
		item.in_or_ex AS itemType
	FROM
		expenditure,
		item
	<where>
		expenditure.item_id = item.id
	AND expenditure.user_id = #{userId,jdbcType=INTEGER}
	AND expenditure.dele = 0
		<if test="beginDate!=null">
			AND date_format(expenditure.date, '%Y-%m') &gt;= date_format(#{beginDate}, '%Y-%m')
		</if>
		<if test="endDate!=null">
			AND date_format(expenditure.date, '%Y-%m') &lt;= date_format(#{endDate}, '%Y-%m')
		</if>
		<if test="keyword!=null">
			AND (item.name like concat('%', #{keyword}, '%')
			OR expenditure.remark like concat('%', #{keyword}, '%'))
		</if>
		<if test="inOrEx!=null">
			AND item.in_or_ex = #{inOrEx}
		</if>
	</where>
	ORDER BY date
  </select>
  
  <insert id="insert" parameterType="com.taoxiuxia.model.Income" >
    insert into income (item_id, user_id, money, type_of_money, date, remark, dele)
    values (#{itemId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{money,jdbcType=REAL}, #{type_of_money, jdbcType=VARCHAR}, #{date,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR}, 
      #{dele,jdbcType=INTEGER})
  </insert>
  
   <!-- 这里还没有加入 income.type_of_money 的内容 -->
  <update id="updateByPrimaryKeySelective" parameterType="com.taoxiuxia.model.Income" >
    update income
    <set >
      <if test="itemId != null" >
        item_id = #{itemId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="money != null" >
        money = #{money,jdbcType=REAL},
      </if>
      <if test="type_of_money != null" >
        type_of_money = #{type_of_money,jdbcType=VARCHAR},
      </if>
      <if test="date != null" >
        date = #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="dele != null" >
        dele = #{dele,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  
  <!-- 以下是自动生成的,以下的内容可能用不到，但是可以模仿这种代码方式，尽量减少代码冗余 -->
  
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.taoxiuxia.model.IncomeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from income
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from income
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  
  
  <select id="countByExample" parameterType="com.taoxiuxia.model.IncomeExample" resultType="java.lang.Integer" >
    select count(*) from income
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExampleSelective" parameterType="map" >
    update income
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.itemId != null" >
        item_id = #{record.itemId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.money != null" >
        money = #{record.money,jdbcType=REAL},
      </if>
      <if test="record.date != null" >
        date = #{record.date,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.dele != null" >
        dele = #{record.dele,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByExample" parameterType="map" >
    update income
    set id = #{record.id,jdbcType=INTEGER},
      item_id = #{record.itemId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      money = #{record.money,jdbcType=REAL},
      date = #{record.date,jdbcType=TIMESTAMP},
      remark = #{record.remark,jdbcType=VARCHAR},
      dele = #{record.dele,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.taoxiuxia.model.Income" >
    update income
    set item_id = #{itemId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      money = #{money,jdbcType=REAL},
      date = #{date,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR},
      dele = #{dele,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>